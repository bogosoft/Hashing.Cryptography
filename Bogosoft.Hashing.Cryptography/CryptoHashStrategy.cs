using System;
using System.Security.Cryptography;

namespace Bogosoft.Hashing.Cryptography
{
    /// <summary>
    /// A collection of cryptographically secure <see cref="IHash"/> implementations.
    /// </summary>
    public static class CryptoHashStrategy
    {
        /// <summary>
        /// Get a hashing strategy which uses the MD5 algorithm.
        /// </summary>
        public static IHash MD5 => new CryptoHashStrategy<MD5CryptoServiceProvider>();

        /// <summary>
        /// Get a hashing strategy which uses the RIPEMD-160 algorithm.
        /// </summary>
        public static IHash RIPEMD160 => new CryptoHashStrategy<RIPEMD160Managed>();

        /// <summary>
        /// Get a hashing strategy which uses the SHA-1 algorithm.
        /// </summary>
        public static IHash SHA1 => new CryptoHashStrategy<SHA1CryptoServiceProvider>();

        /// <summary>
        /// Get a hashing strategy which uses the SHA-256 algorithm.
        /// </summary>
        public static IHash SHA256 => new CryptoHashStrategy<SHA256CryptoServiceProvider>();

        /// <summary>
        /// Get a hashing strategy which uses the SHA-384 algorithm.
        /// </summary>
        public static IHash SHA384 => new CryptoHashStrategy<SHA384CryptoServiceProvider>();

        /// <summary>
        /// Get a hashing strategy which uses the SHA-512 algorithm.
        /// </summary>
        public static IHash SHA512 => new CryptoHashStrategy<SHA512CryptoServiceProvider>();
    }

    class CryptoHashStrategy<T> : IHash where T : HashAlgorithm
    {
        Type type;

        /// <summary>
        /// Get a value corresponding to the length of the sequence of bytes
        /// generated by the current hashing strategy.
        /// </summary>
        public int HashLength
        {
            get
            {
                using (var algorithm = Activator.CreateInstance<T>())
                {
                    return algorithm.HashSize;
                }
            }
        }

        internal CryptoHashStrategy()
        {
            type = typeof(T);
        }

        /// <summary>
        /// Generate a fixed-length sequence of bytes against a given <see cref="IHashable"/> object.
        /// </summary>
        /// <param name="object">An object to hash.</param>
        /// <returns>
        /// A fixed-length sequence of bytes.
        /// </returns>
        public byte[] Compute(IHashable @object)
        {
            using (var algorithm = Activator.CreateInstance<T>())
            {
                return algorithm.ComputeHash(@object.GetHashBytes());
            }
        }
    }
}